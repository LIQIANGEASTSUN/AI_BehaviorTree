<?php
return array(
1=>["ID"=>1,"Key"=>"SelectFile","CN"=>"选择文件","EN"=>"SelectFile"],
2=>["ID"=>2,"Key"=>"SaveFile","CN"=>"保存","EN"=>"Save"],
3=>["ID"=>3,"Key"=>"DeleteFile","CN"=>"删除","EN"=>"Delete"],
4=>["ID"=>4,"Key"=>"UpdateFile","CN"=>"更新","EN"=>"Update"],
5=>["ID"=>5,"Key"=>"MergeFile","CN"=>"合并","EN"=>"MergeFile"],
6=>["ID"=>6,"Key"=>"FileName","CN"=>"文件名","EN"=>"FileName"],
7=>["ID"=>7,"Key"=>"Descript","CN"=>"描述","EN"=>"Descript"],
8=>["ID"=>8,"Key"=>"Inspect","CN"=>"视图面板","EN"=>"Inspect"],
9=>["ID"=>9,"Key"=>"Make Transition","CN"=>"连线","EN"=>"Make Transition"],
10=>["ID"=>10,"Key"=>"Delete Node","CN"=>"删除节点","EN"=>"Delete Node"],
11=>["ID"=>11,"Key"=>"Remove Parent","CN"=>"移除父节点","EN"=>"Remove Parent"],
12=>["ID"=>12,"Key"=>"Tips","CN"=>"提示","EN"=>"tips"],
13=>["ID"=>13,"Key"=>"DeleteNodeConfirm","CN"=>"确定要删除节点吗？","EN"=>"Are you sure you want to delete the node？"],
14=>["ID"=>14,"Key"=>"Yes","CN"=>"是的","EN"=>"Yes"],
15=>["ID"=>15,"Key"=>"No","CN"=>"取消","EN"=>"No"],
16=>["ID"=>16,"Key"=>"DeleteParentConfirm","CN"=>"确定要删除父节点吗？","EN"=>"Are you sure you want to remove the parent node?"],
17=>["ID"=>17,"Key"=>"CompositeNode","CN"=>"组合节点","EN"=>"CompositeNode"],
18=>["ID"=>18,"Key"=>"DecoratorNode","CN"=>"修饰节点","EN"=>"DecoratorNode"],
19=>["ID"=>19,"Key"=>"ConditionsNode","CN"=>"条件节点","EN"=>"ConditionsNode"],
20=>["ID"=>20,"Key"=>"ActionNode","CN"=>"行为节点","EN"=>"ActionNode"],
21=>["ID"=>21,"Key"=>"Add Node","CN"=>"添加节点","EN"=>"Add Node"],
22=>["ID"=>22,"Key"=>"AddSubTree","CN"=>"添加子树","EN"=>"AddSubTree"],
23=>["ID"=>23,"Key"=>"MultipleRootNode","CN"=>"有多个根节点","EN"=>"There are multiple root nodes"],
24=>["ID"=>24,"Key"=>"MustBeARootNode","CN"=>"必须有一个根节点","EN"=>"There must be a root node"],
25=>["ID"=>25,"Key"=>"RootCannotHaveParent","CN"=>"跟节点 ： {0}  不能有父节点","EN"=>"The root node: {0} can't have a parent node"],
26=>["ID"=>26,"Key"=>"NodeCannotHaveChilds","CN"=>"节点：{0} {1} 不能有子节点","EN"=>"The node: {0} {1}  cannot have child nodes"],
27=>["ID"=>27,"Key"=>"FileDoesNotExist","CN"=>"文件不存在：{0}","EN"=>"File does not exist:{0}"],
28=>["ID"=>28,"Key"=>"Warning","CN"=>"警告","EN"=>"Warning"],
29=>["ID"=>29,"Key"=>"FileNameCannotEmpty","CN"=>"文件名不能为空","EN"=>"The file name cannot be empty"],
30=>["ID"=>30,"Key"=>"OK","CN"=>"好的","EN"=>"OK"],
31=>["ID"=>31,"Key"=>"FileNameTooLong","CN"=>"文件名过长，不能大于20个字符","EN"=>"The file name is too long and cannot exceed 20 characters"],
32=>["ID"=>32,"Key"=>"Cancel","CN"=>"取消","EN"=>"Cancel"],
33=>["ID"=>33,"Key"=>"Replace","CN"=>"替换","EN"=>"Replace"],
34=>["ID"=>34,"Key"=>"FileExistWantReplace","CN"=>"文件已存在, 是否替换新文件","EN"=>"The file already exists. Do you want to replace the file"],
35=>["ID"=>35,"Key"=>"SelectConfigFile","CN"=>"选择配置文件","EN"=>"Select a config file"],
36=>["ID"=>36,"Key"=>"ID","CN"=>"ID:{0}","EN"=>"ID:{0}"],
37=>["ID"=>37,"Key"=>"NodeId","CN"=>"节点ID","EN"=>"NodeID"],
38=>["ID"=>38,"Key"=>"PrintParentPaths","CN"=>"打印节点所有父节点路径","EN"=>"Prints all parent paths"],
39=>["ID"=>39,"Key"=>"ClassIdentification","CN"=>"类标识_{0}","EN"=>"Class identification _ {0}"],
40=>["ID"=>40,"Key"=>"ParentNode","CN"=>"父节点_{0}","EN"=>"ParentNode_{0}"],
41=>["ID"=>41,"Key"=>"BelongSubTree","CN"=>"所属子树ID:{0}","EN"=>"Belong to SubTreeID:{0}"],
42=>["ID"=>42,"Key"=>"Remark","CN"=>"备注","EN"=>"Remark"],
43=>["ID"=>43,"Key"=>"RootNode","CN"=>"根节点","EN"=>"RootNode"],
44=>["ID"=>44,"Key"=>"SubTreeEntryNode","CN"=>"子树入口节点","EN"=>"SubTree entry node"],
45=>["ID"=>45,"Key"=>"SyncMoveChild","CN"=>"同步移动子节点","EN"=>"Move the child node synchronously"],
46=>["ID"=>46,"Key"=>"FunctionComposite","CN"=>"组合节点功能描述","EN"=>"Function description of the composite node"],
47=>["ID"=>47,"Key"=>"AddGroup","CN"=>"添加组","EN"=>"AddGroup"],
48=>["ID"=>48,"Key"=>"IfNodeMaxChild","CN"=>"判断节点 {0} 最多只能有三个子节点","EN"=>"If Node {0} can have a maximum of three child nodes"],
49=>["ID"=>49,"Key"=>"NodeType","CN"=>"节点类型","EN"=>"NodeType"],
50=>["ID"=>50,"Key"=>"ExecuteConditional","CN"=>"执行条件","EN"=>"Execute conditional"],
51=>["ID"=>51,"Key"=>"DefaultResult","CN"=>"默认返回结果","EN"=>"Default return result"],
52=>["ID"=>52,"Key"=>"Parameter","CN"=>"参数","EN"=>"Parameter"],
53=>["ID"=>53,"Key"=>"AddCondition","CN"=>"添加条件","EN"=>"AddCondition"],
54=>["ID"=>54,"Key"=>"NoParameterCanBeAdd","CN"=>"没有参数可添加，请先添加参数","EN"=>"No parameters can be added, please add parameters"],
55=>["ID"=>55,"Key"=>"NoParameter","CN"=>"无可添加的参数","EN"=>"No parameters can be added"],
56=>["ID"=>56,"Key"=>"ChildNodePriority","CN"=>"子节点:{0} 权值:","EN"=>"Child node :{0}  priority"],
57=>["ID"=>57,"Key"=>"RepetitionsTimes","CN"=>"重复执行次数","EN"=>"Number of repetitions"],
58=>["ID"=>58,"Key"=>"SubTreeValue","CN"=>"子树值","EN"=>"SubTreeValue"],
59=>["ID"=>59,"Key"=>"SubTreeType","CN"=>"子树类型","EN"=>"SubTreeType"],
60=>["ID"=>60,"Key"=>"ConfigFile","CN"=>"配置文件","EN"=>"Config File"],
61=>["ID"=>61,"Key"=>"SelectSubTreeConfig","CN"=>"选择子树配置文件","EN"=>"Select the subtree config file"],
62=>["ID"=>62,"Key"=>"ChangeSubtreeToConfig","CN"=>"将子树存储为配置文件","EN"=>"Change the subtree to config file"],
63=>["ID"=>63,"Key"=>"English","CN"=>"英文","EN"=>"English"],
64=>["ID"=>64,"Key"=>"Chinese","CN"=>"中文","EN"=>"Chinese"],
65=>["ID"=>65,"Key"=>"ParameterNameRules","CN"=>"参数名只能包含:数字、字母、下划线，且数字不能放在第一个字符位置","EN"=>"The parameter name can contain only digits, letters, and underscores (_), and cannot start with a digit"],
66=>["ID"=>66,"Key"=>"FileNameReadOnly","CN"=>"此处字段名只读","EN"=>"The field name is read only"],
67=>["ID"=>67,"Key"=>"Select","CN"=>"选择","EN"=>"Select"],
68=>["ID"=>68,"Key"=>"GlobalParameter","CN"=>"全局变量","EN"=>"Global parameter"],
69=>["ID"=>69,"Key"=>"ImportParameter","CN"=>"导入变量","EN"=>"Import parameter"],
70=>["ID"=>70,"Key"=>"RemoveUnUseParameter","CN"=>"删除未使用变量","EN"=>"RemoveUnUseParameter"],
71=>["ID"=>71,"Key"=>"ConditionParameters","CN"=>"条件参数","EN"=>"Condition parameters"],
72=>["ID"=>72,"Key"=>"AddCondition","CN"=>"添加条件","EN"=>"Add Condition"],
73=>["ID"=>73,"Key"=>"RuntimeParameter","CN"=>"运行时变量","EN"=>"Runtime parameter"],
74=>["ID"=>74,"Key"=>"Greater","CN"=>"大于","EN"=>"Greater "],
75=>["ID"=>75,"Key"=>"Less","CN"=>"小于","EN"=>"Less"],
76=>["ID"=>76,"Key"=>"Equal","CN"=>"等于","EN"=>"Equal"],
77=>["ID"=>77,"Key"=>"NotEqual","CN"=>"不等于","EN"=>"Not Equal"],
78=>["ID"=>78,"Key"=>"GreaterOrEqual","CN"=>"大于等于","EN"=>"GreaterOrEqual"],
79=>["ID"=>79,"Key"=>"LessOrEqual","CN"=>"小于等于","EN"=>"LessOrEqual"],
80=>["ID"=>80,"Key"=>"SelectNode","CN"=>"选择节点","EN"=>"SelectNode"],
81=>["ID"=>81,"Key"=>"SequenceNode","CN"=>"顺序节点","EN"=>"SequenceNode"],
82=>["ID"=>82,"Key"=>"RandomNode","CN"=>"随机节点","EN"=>"RandomNode"],
83=>["ID"=>83,"Key"=>"RandomSequeuece","CN"=>"随机顺序节点","EN"=>"RandomSequeuece"],
84=>["ID"=>84,"Key"=>"RandomPriority","CN"=>"随机权重节点","EN"=>"RandomPriority"],
85=>["ID"=>85,"Key"=>"ParallelNode","CN"=>"并行节点","EN"=>"ParallelNode"],
86=>["ID"=>86,"Key"=>"ParalleSelect","CN"=>"并行选择节点","EN"=>"ParalleSelect"],
87=>["ID"=>87,"Key"=>"ParalleAll","CN"=>"并行执行所有节点","EN"=>"ParalleAll"],
88=>["ID"=>88,"Key"=>"IfJudgeParallel","CN"=>"IF 判断并行节点","EN"=>"IfJudgeParallel"],
89=>["ID"=>89,"Key"=>"IfJudgeSequence","CN"=>"IF 判断顺序节点","EN"=>"IfJudgeSequence"],
90=>["ID"=>90,"Key"=>"DecoratorInverter","CN"=>"修饰节点_取反","EN"=>"DecoratorInverter"],
91=>["ID"=>91,"Key"=>"DecoratorRepeat","CN"=>"修饰节点_重复","EN"=>"DecoratorRepeat"],
92=>["ID"=>92,"Key"=>"DecoratorReturnFail","CN"=>"修饰_返回Fail","EN"=>"DecoratorReturnFail"],
93=>["ID"=>93,"Key"=>"DecoratorReturnSuccess","CN"=>"修饰_返回Success","EN"=>"DecoratorReturnSuccess"],
94=>["ID"=>94,"Key"=>"DecoratorUntilFail","CN"=>"修饰_直到Fail","EN"=>"DecoratorUntilFail"],
95=>["ID"=>95,"Key"=>"DecoratorUntilSuccess","CN"=>"修饰_直到Success","EN"=>"DecoratorUntilSuccess"],
96=>["ID"=>96,"Key"=>"Condition","CN"=>"条件节点","EN"=>"Condition"],
97=>["ID"=>97,"Key"=>"Action","CN"=>"行为节点","EN"=>"Action"],
98=>["ID"=>98,"Key"=>"SubTreeNode","CN"=>"子树节点","EN"=>"SubTreeNode"],
99=>["ID"=>99,"Key"=>"NoSelectNode","CN"=>"没有选择节点","EN"=>"No select node"],
100=>["ID"=>100,"Key"=>"CommonChildNodesCanBeEdited","CN"=>"普通：可编辑子节点","EN"=>"Common: child nodes can be edited"],
101=>["ID"=>101,"Key"=>"ConfigReadConfigFile","CN"=>"配置：读取配置文件","EN"=>"Configuration: Reads the configuration file"],
102=>["ID"=>102,"Key"=>"IfJudgmentNode","CN"=>"if 判断节点","EN"=>"If judgment node"],
103=>["ID"=>103,"Key"=>"ExecuteNode","CN"=>"执行节点","EN"=>"ExecuteNode"],
104=>["ID"=>104,"Key"=>"SelectNodeFunctionDescript","CN"=>"选择节点：依次从头顺次遍历执行所有子节点 \n当前执行节点返回 Success，退出停止，向父节点 \n返回 Success \n\n当前执行节点返回 Fail，退出当前节点 \n继续执行下一个节点 \n\n当前执行节点返回 Running, 记录当前节点，向父节 \n点返回 Running，下次执行直接从该节点开始 \n\n如果所有节点都返回Fail，执行完所有节点后 \n向父节点返回 Fail; \n\n","EN"=>"Select node: Execute all child nodes in sequence \n \nThe current executing node returns Success,exits \nand stop,   returns Success to the parent node  \n \nThe current execution node returns Fail,exits the\ncurrent node,Proceed to the next node \n \nThe current executing node returns Running, recording \nthe current node, returns Running to the parent node, \nand the next execution starts from this node \n \nIf all nodes return Fail, after all nodes are executed, \nReturn Fail to the parent node \n \n"],
105=>["ID"=>105,"Key"=>"SequenceNodeFunctionDescript","CN"=>"顺序节点：依次执行子节点 \n当前执行节点返回 Success，就继续执行后续节点 \n\n当前执行节点返回 Fail，退出停止，向父节点 \n返回 Fail，下次执行直接从第一个节点开始 \n\n当前执行节点返回 Running, 记录当前节点，向父节 \n点返回 Running，下次执行直接从该节点开始 \n\n如果所有节点都返回 Success，向父节点返回 Success \n","EN"=>"Sequence node: Executes the child nodes in sequence  \n \nIf the current executing node returns Success,  \nexecute the next node                                          \n \nThe current executing node returns Fail, exits and     \nstops, return Fail to the parent node, and the next    \nexecution starts from the first node                   \n \n The current executing node returns Running, \nrecording  the current node, returns Running to the  \nparent node,  and the next execution starts from this node           \n \nIf all nodes return Success, return Success to the     \nparent node                                            \n"],
106=>["ID"=>106,"Key"=>"RandomSequenceNodeFunctionDescript","CN"=>"随机顺序节点：(参考顺序节点) \n每次随机一个未执行的节点，总随机次数为子节点个数 \n\n当前执行节点返回 Success，继续随机一个未执行的节点 \n\n当前执行节点返回 Fail，退出停止 \n向父节点返回 Fail \n\n当前执行节点返回 Running, 记录当前节点 \n向父节点返回 Running，下次执行直接从该节点开始 \n\n如果所有节点都返回 Success \n向父节点返回 Success \n\n","EN"=>"RandomSequence node :(refer to Sequence node)     \nEvery time random a unexecuted node and \nexecuted   the node, the total number of random is the      \nnumber of  child nodes                                       \n \nThe current executing node returns Success,       \nrandom a node and execute                         \n \nThe current execution node returns Fail, exits    \nand stop, Return Fail to the parent node          \n \nThe current executing node returns Running,       \nrecording the current node, Return Running to     \nthe parent node, and the next execution starts    \nfrom that node                                    \n \nIf all nodes return Success,Returns Success to    \nthe parent node                                   \n \n"],
107=>["ID"=>107,"Key"=>"RandomSelectNodeFunctionDescript","CN"=>"随机选择节点：(参考选择节点) \n每次随机一个未执行的节点，总随机次数为子节点个数 \n\n当前执行节点返回 Success，退出停止\n向父节点返回 Success \n\n当前执行节点返回 Fail，退出当前节点 \n继续随机一个未执行的节点开始执行 \n\n当前执行节点返回 Running, 记录当前节点 \n向父节点返回 Running，下次执行直接从该节点开始 \n\n如果所有节点都返回Fail，执行完所有节点后 \n向父节点返回 Fail; \n\n","EN"=>"Randoml select nodes :(refer to select nodes)          \nEvery time random a unexecuted node and executed       \nthe node, the total number of random is the number      \nof child nodes                                          \n \nThe current executing node returns Success, exits and    \nstop, Returns Success to the parent node                 \n \nThe current execution node returns Fail, exits the      \ncurrent node, random a unexecuted node and executed     \n \nThe current executing node returns Running, recording    \nthe current node, Return Running to the parent node,     \nthe next execution starts from that node                 \n \nIf all nodes return Fail, after all nodes are executed   \nReturn Fail to the parent node                            \n \n"],
108=>["ID"=>108,"Key"=>"RandomPriorityNodeFunctionDescript","CN"=>"随机权重节点：(参考随机选择节点) \n每次根据节点权重随机一个未执行的节点 \n总随机次数为子节点个数 \n\n当前执行节点返回 Success，退出停止 \n向父节点返回 Success \n\n当前执行节点返回 Fail，退出当前节点 \n继续随机一个未执行的节点开始执行 \n\n当前执行节点返回 Running, 记录当前节点 \n向父节点返回 Running \n下次执行直接从该节点开始 \n\n如果所有节点都返回Fail，执行完所有节点后 \n向父节点返回 Fail; \n","EN"=>"Random Priority node :(refer to random select node)      \n \nRandom one unexecuted node based on node priority        \nThe total random number is the number of children        \n \nThe current executing node returns Success, exits        \nand stop, Returns Success to the parent node             \n \nThe current execution node returns Fail, exits the       \ncurrent node, random an unexecuted node and executing    \n \nThe current executing node returns Running, recording    \nthe current node, Return Running to the parent node,     \nThe next execution starts from this node                 \n \n  If all nodes return Fail, after all nodes are executed,  \nReturn Fail to the parent node;                          \n \n"],
109=>["ID"=>109,"Key"=>"ParallelSelectNodeFunctionDescript","CN"=>"并行选择节点：依次从头顺次遍历执行所有子节点 \n\n 当前执行节点返回 Success，退出停止，向父节点 \n 返回 Success \n\n 当前执行节点返回 Running, 记录当前节点，继续 \n 执行下一个节点，记录所有返回 Running 的节点 \n\n 当前执行节点返回 Fail，继续执行下一个节点 \n\n 如果没有节点返回 Success， \n 如果 Running 的节点数大于 0 向父节点返回 Running \n 否则向父节点返回 Fail \n;","EN"=>"Parallel Select node: execute all child nodes in sequence        \n \nThe current executing node returns Success, exits and      \n stop Return Success to the parent node                                \n \nThe current executing node returns Running, records          \nthe current node, and execute the next node,      \n         record all nodes  that return Running                                                  \n \nThe current executing node returns Fail, execute the next node    \nIf no node returns Success, Return Running to the parent node     \nif the number of Running nodes is greater than 0                  \nOtherwise returned Fail to the parent node                        \n \n"],
110=>["ID"=>110,"Key"=>"ParallelAllNodeFunctionDescript","CN"=>"并行执行所有节点：依次从头顺次遍历执行所有子节点 \n\n 当前执行节点返回 Success、 Fail、Running 都继续 \n 执行下一个节点，分别记录返回三种结果的节点个数 \n\n 执行完所有节点后 \n 如果所有节点都返回 Success 向父节点返回 Success \n 如果所有节点都返回 Fail 向父节点返回 Fail \n 否则一定有节点返回了Running 向父节点返回 Running \n;","EN"=>"Parallel All node: Execute all child nodes in sequence       \n \nThe current execution node returns Success, Fail, or           \nRunning, Execute the next node, record the number              \nof nodes that return three results                             \n \nAfter all nodes are executed                                    \nReturn Success to the parent node if all nodes return \n Success                                \n \nReturn Fail to the parent node if all nodes return Fail   \n \nOtherwise, some node must return Running, return \nRunning  to the parent node                                        \n \n"],
111=>["ID"=>111,"Key"=>"ParallelNodeFunctionDescript","CN"=>"并行节点：依次从头顺次遍历执行所有子节点 \n\n 当前执行节点返回 Fail，退出停止，向父节点 \n 返回 Fail \n\n 当前执行节点返回 Success，记录当前节点，继续 \n 执行下一个节点，记录所有返回 Success 的节点\n\n 当前执行节点返回 Running, 记录当前节点，继续 \n 执行下一个节点，记录所有返回 Running 的节点 \n\n 如果没有节点返回 Fail， \n 如果所有节点都返回 Success 向父节点返回 Success \n 否则向父节点返回 Running \n;","EN"=>"Parallel node: Execute all child nodes in sequence           \n \nThe current executing node returns Fail, exits and stops,    \nReturn Fail to the parent node                               \n \nThe current executing node returns Success, records          \nthe current node, and executing the next node, record        \nall nodes that return Success                                \n \nThe current executing node returns Running, records the      \ncurrent node, executing the next node and record all         \nnodes that return Running                                       \n \nIf no node returns Fail,                                           \nReturn Success to the parent node if all nodes return Success        \nReturn Fail to the parent node if at least one node returns Fail   \n \nOtherwise, returned Running to the parent node                   \n"],
112=>["ID"=>112,"Key"=>"IfJudgeSequenceNodeFunctionDescript","CN"=>"并行节点：依次从头顺次遍历执行所有子节点 \n\n 当前执行节点返回 Fail，退出停止，向父节点 \n 返回 Fail \n\n 当前执行节点返回 Success，记录当前节点，继续 \n 执行下一个节点，记录所有返回 Success 的节点\n\n 当前执行节点返回 Running, 记录当前节点，继续 \n 执行下一个节点，记录所有返回 Running 的节点 \n\n 如果没有节点返回 Fail， \n 如果所有节点都返回 Success 向父节点返回 Success \n 否则向父节点返回 Running \n;","EN"=>"If Judge Sequence node:                                         \n \nYou can only have two or three children                          \nThe first is that only Success and Fail are returned             \n \nif the second or third nodes return RUNNING last time,            \nthis time, the node that returned running is executing again     \n \nIf not, executed the first node, based on the first node          \nResults Success or Fail, the second and third nodes               \nare selected to execute;                                          \n \n"],
113=>["ID"=>113,"Key"=>"IfJudgeParallelNodeFunctionDescript","CN"=>"if判断并行节点：\n 只能有 二或者三个子节点\n 第一个为判断节点只能返回Success、Fail \n\n 因为是并行节点，每次执行都会先执行第一个节点\n 根据第一个节点返回结果选择执行第二个、第三个节点 \n\n 如果上次执行的是第二、三个节点中的某一个 \n 当前要执行的节点跟上次相同，则会直接执行 Execute \n 如果当前要执行的节点跟上次不同，则会执行上次节点 \n OnExit , 新节点则走 OnEnter、Execute;","EN"=>"If Judge Parallel node:                                     \nYou can only have two or three children                     \nThe first is that only Success and Fail are returned        \n \nthe first node is executed first with each execution,       \nExecute the second or third nodes based on the     \n results of the first node                                             \n \nIf the second or third nodes to be executed is the      \n same  as the previous one, call the Execute method      \n on this node                              \n \nIf the second or third nodes to be executed is   \n different   from the last one, call the OnExit method    \n of the previous  node, call the OnEnter and Execute   \n methods of the new node  \n \n"],
114=>["ID"=>114,"Key"=>"DecoratorUntilSuccessNodeFunctionDescript","CN"=>"修饰_直到Success：\n 执行节点 \n 如果节点返回结果不是 Success \n 向父节点返回 Running \n\n 直到节点返回 Success，向父节点返回 Success","EN"=>"Decorator Until Success node:                             \n \nexecuting the node                                        \nIf the node returns a result other than Success           \n Return Running to the parent node                         \n \nSuccess is returned to the parent node until the node     \nreturns Success                                           \n \n"],
115=>["ID"=>115,"Key"=>"DecoratorUntilFailNodeFunctionDescript","CN"=>"修饰_直到Fail：\n 执行节点 \n 如果节点返回结果不是 Fail \n 向父节点返回 Running \n\n 直到节点返回 Fail，向父节点返回 Success","EN"=>"Decorator Until Fail node:                             \n \nexecuting the node                                        \nIf the node returns a result other than Fail           \n Return Running to the parent node                         \n \nSuccess is returned to the parent node until the node     \nreturns Fail                                           \n \n"],
116=>["ID"=>116,"Key"=>"DecoratorReturnSuccessNodeFunctionDescript","CN"=>"修饰_返回Success：\n 执行节点，无论节点返回 Success、Fail、Running \n 执行结束后永远向父节点返回 Success  \n","EN"=>"Decorator Return Success node:                                           \n \nExecute the node, whether the node returns Success, Fail, or Running     \n, Fail, or Running  Success is always returned to the           \nparent node after execution    \n  \n"],
117=>["ID"=>117,"Key"=>"DecoratorReturnFailNodeFunctionDescript","CN"=>"修饰_返回Fail：\n 执行节点，无论节点返回 Success、Fail、Running \n 执行结束后永远向父节点返回 Fail  \n","EN"=>"Decorator Return Fail node:                                           \n \nExecute the node, whether the node returns Success    \n, Fail, or Running Fail is always returned to the           \n parent node after execution    \n \n"],
118=>["ID"=>118,"Key"=>"DecoratorRepeatNodeFunctionDescript","CN"=>"修饰节点_重复: \n 开始执行该节点时，将记录次数清零 \n 顺序执行所有子节点(记为 1 次)，不关心节点返回结果 \n\n 如果 执行次数 < 配置执行次数 向父节点返回 Running \n 如果 执行次数 >= 配置执行次数 向父节点返回 Success \n","EN"=>"Decorator Repeat node:                                          \n \nWhen the node is started, the number of records is              \ncleared to zero                                                 \n \nExecute all child nodes in sequence, record execution times     \n \nIf the number of executions < the Configure number,             \nreturn Running to the parent node                               \n \nIf the number of executions >=the Configure number,             \nreturn Success to the parent node                               \n \n"],
119=>["ID"=>119,"Key"=>"DecoratorInverterNodeFunctionDescript","CN"=>"取反修饰节点 Inverter    对子节点执行结果取反","EN"=>"Decorator Inverter node:                               \n \nreversed the result of executing the child node        \n \n"],
);
?>